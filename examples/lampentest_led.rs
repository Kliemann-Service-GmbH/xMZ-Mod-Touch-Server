extern crate xmz_server;
extern crate clap;

use std::thread;
use std::time::Duration;
use xmz_server::*;
use clap::App;


fn run(led: &mut ShiftRegister) -> Result<()> {
    try!(led.test());

    Ok(())
}

fn reset(led: &mut ShiftRegister) -> Result<()> {
    try!(led.reset());

    Ok(())
}

fn main() {
    let mut led = ShiftRegister::new(ShiftRegisterType::LED);

    let matches = App::new("Lampentest LED")
        .about("Lampentest für die LED der xMZ-Mod-Touch")
        .args_from_usage("-r... 'Reset, schaltet alle Ausgänge aus (LOW)'")
        .get_matches();

        match matches.occurrences_of("r") {
            1 => {
                reset(&mut led);
                ::std::process::exit(0);
            }
            _ => {}
        }

    if let Err(ref e) = run(&mut led) {
        use ::std::io::Write;
        let stderr = &mut ::std::io::stderr();
        let errmsg = "Error writing to stderr";

        writeln!(stderr, "error: {}", e).expect(errmsg);

        for e in e.iter().skip(1) {
            writeln!(stderr, "caused by: {}", e).expect(errmsg);
        }

        // The backtrace is not always generated. Try to run this example
        // with `RUST_BACKTRACE=1`.
        if let Some(backtrace) = e.backtrace() {
            writeln!(stderr, "backtrace: {:?}", backtrace).expect(errmsg);
        }

        ::std::process::exit(1);
    }
}
