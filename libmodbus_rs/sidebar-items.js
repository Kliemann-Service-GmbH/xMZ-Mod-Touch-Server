initSidebarItems({"constant":[["MODBUS_ENOBASE",""],["MODBUS_MAX_ADU_LENGTH",""],["MODBUS_MAX_PDU_LENGTH",""],["MODBUS_RTU_MAX_ADU_LENGTH",""],["MODBUS_TCP_DEFAULT_PORT",""],["MODBUS_TCP_MAX_ADU_LENGTH",""],["MODBUS_TCP_SLAVE",""]],"enum":[["ErrorRecoveryMode",""],["Exception","Modbus protocol exceptions"],["FunctionCode","Modbus function codes"],["RequestToSendMode",""],["SerialMode",""]],"fn":[["get_byte_from_bits","`get_byte_from_bits` - get the value from many bit"],["get_float_abcd","`get_float_abcd` - get a float value from 2 registers in ABCD byte order"],["get_float_badc","`get_float_badc` - get a float value from 2 registers in BADC byte order"],["get_float_cdab","`get_float_cdab` - get a float value from 2 registers in CDAB byte order"],["get_float_dcba","`get_float_dcba` - get a float value from 2 registers in DCBA byte order"],["set_bits_from_byte","`set_bits_from_byte` - set many bits from a single byte value"],["set_bits_from_bytes","`set_bits_from_bytes` -  set many bits from an array of bytes"],["set_float_abcd","`set_float_abcd` - set a float value in 2 registers using ABCD byte order"],["set_float_badc","`set_float_badc` - set a float value in 2 registers using BADC byte order"],["set_float_cdab","`set_float_cdab` - set a float value in 2 registers using CDAB byte order"],["set_float_dcba","`set_float_dcba` - set a float value in 2 registers using DCBA byte order"]],"mod":[["errors",""]],"struct":[["Modbus","Safe interface for libmodbus"],["ModbusMapping","To handle the mapping of your Modbus data, you must use this struct"]],"trait":[["ModbusClient","The Modbus protocol defines different data types and functions to read and write them from/to remote devices. The following functions are used by the clients to send Modbus requests:"],["ModbusRTU","The RTU backend (Remote Terminal Unit) is used in serial communication and makes use of a compact, binary representation of the data for protocol communication. The RTU format follows the commands/data with a cyclic redundancy check checksum as an error check mechanism to ensure the reliability of data. Modbus RTU is the most common implementation available for Modbus. A Modbus RTU message must be transmitted continuously without inter-character hesitations (extract from Wikipedia, Modbus, http://en.wikipedia.org/wiki/Modbus (as of Mar. 13, 2011, 20:51 GMT)."],["ModbusServer","The server is waiting for request from clients and must answer when it is concerned by the request. The libmodbus offers the following functions to handle requests:"],["ModbusTCP","The TCP backend implements a Modbus variant used for communications over TCP/IPv4 networks. It does not require a checksum calculation as lower layer takes care of the same."],["ModbusTCPPI","The TCP PI (Protocol Independent) backend implements a Modbus variant used for communications over TCP IPv4 and IPv6 networks. It does not require a checksum calculation as lower layer takes care of the same."]]});